datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma-client-js"
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  articleId String
  comments  Comment[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  post      Post?    @relation(fields: [postId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
  postId    String   @db.ObjectId
  userId    String   @db.ObjectId
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?  @unique
  image         String?
  emailVerified DateTime?
  comments      Comment[]
  accounts      Account[]
  sessions      Session[]

  @@map(name: "users")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Newsletter {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  email              String   @unique
  status             Status   @default(UNSUBSCRIBE)
}

enum Status {
  SUBSCRIBE
  UNSUBSCRIBE
}